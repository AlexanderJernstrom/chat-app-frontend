{"version":3,"sources":["generated/graphql.tsx","components/Login.tsx","components/Register.tsx","components/ServerViews.tsx","store/store.ts","components/Channel.tsx","components/Server.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CreateServerDocument","gql","GetMessagesSubDocument","InviteMemberDocument","LoginDocument","SendMessageDocument","GetServerDocument","GetServersDocument","CreateUserDocument","Login","baseOptions","useState","email","password","loginOptions","setLoginOptions","update","store","data","login","accessToken","localStorage","setItem","removeItem","Apollo","useEffect","getItem","to","onSubmit","e","preventDefault","onChange","target","name","value","placeholder","type","onClick","variables","Register","registerOptions","setRegisterOptions","createUser","JSON","stringify","error","style","display","gridTemplateRows","width","marginLeft","message","ServerViews","context","headers","token","loading","useCreateServerMutation","createServer","text","setText","textAlign","boxShadow","backgroundColor","justifyContent","getServers","map","server","height","borderRadius","marginBottom","marginTop","id","color","textDecoration","borderLeft","borderRight","borderTop","outline","useStore","create","set","selectedChannel","selectChannel","state","Channel","initialMessages","idParam","channelName","messageRef","useRef","channelId","onSubscriptionData","client","subscriptionData","query","readQuery","console","log","getMessage","newData","messages","getServer","writeQuery","current","scrollTop","scrollHeight","useSendMessageMutation","sendMessage","setTimeout","ref","overflowY","border","fontSize","marginRight","user","Date","createdAt","toDateString","body","rows","resize","Server","props","match","params","onCompleted","channels","useInviteMemberMutation","_","inviteMember","window","location","reload","alert","invite","channel","cursor","filter","find","getMembersInServer","serverId","App","path","exact","component","Boolean","hostname","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.14485169.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUser: User;\n  getServers: Array<Server>;\n  getMembersInServer: Array<User>;\n  getServer: ServerResponse;\n  getChannelsInServer: Array<Channel>;\n  getMessages: Array<Message>;\n};\n\n\nexport type QueryGetUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetMembersInServerArgs = {\n  serverId: Scalars['String'];\n};\n\n\nexport type QueryGetServerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetChannelsInServerArgs = {\n  serverId: Scalars['String'];\n};\n\n\nexport type QueryGetMessagesArgs = {\n  channelId: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  serverIds: Array<Scalars['String']>;\n};\n\nexport type Server = {\n  __typename?: 'Server';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  ownerId: Scalars['String'];\n  owner: User;\n};\n\nexport type ServerResponse = {\n  __typename?: 'ServerResponse';\n  server: Server;\n  channels: Array<Channel>;\n  messages: Array<Message>;\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['ID'];\n  serverId: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['ID'];\n  body: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  userId: Scalars['String'];\n  channelId: Scalars['String'];\n  user: User;\n  channel: Channel;\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login: LoginResponse;\n  createUser: Scalars['Boolean'];\n  createServer: Scalars['Boolean'];\n  inviteMember: Scalars['Boolean'];\n  createChannel: Scalars['Boolean'];\n  sendMessage: Message;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationCreateServerArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationInviteMemberArgs = {\n  serverId: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreateChannelArgs = {\n  serverId: Scalars['String'];\n  channelName: Scalars['String'];\n};\n\n\nexport type MutationSendMessageArgs = {\n  message: Scalars['String'];\n  channelId: Scalars['String'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  getMessage: Message;\n};\n\n\nexport type SubscriptionGetMessageArgs = {\n  channelId: Scalars['String'];\n};\n\nexport type CreateServerMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateServerMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createServer'>\n);\n\nexport type GetMessagesSubSubscriptionVariables = Exact<{\n  channelId: Scalars['String'];\n}>;\n\n\nexport type GetMessagesSubSubscription = (\n  { __typename?: 'Subscription' }\n  & { getMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'body' | 'channelId' | 'createdAt'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'name' | 'id'>\n    ) }\n  ) }\n);\n\nexport type GetMessagesQueryVariables = Exact<{\n  channelId: Scalars['String'];\n}>;\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'Query' }\n  & { getMessages: Array<(\n    { __typename?: 'Message' }\n    & Pick<Message, 'body' | 'id' | 'createdAt'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type InviteMemberMutationVariables = Exact<{\n  email: Scalars['String'];\n  serverId: Scalars['String'];\n}>;\n\n\nexport type InviteMemberMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'inviteMember'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n  ) }\n);\n\nexport type SendMessageMutationVariables = Exact<{\n  channelId: Scalars['String'];\n  message: Scalars['String'];\n}>;\n\n\nexport type SendMessageMutation = (\n  { __typename?: 'Mutation' }\n  & { sendMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'body'>\n  ) }\n);\n\nexport type GetServerQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetServerQuery = (\n  { __typename?: 'Query' }\n  & { getServer: (\n    { __typename?: 'ServerResponse' }\n    & { server: (\n      { __typename?: 'Server' }\n      & Pick<Server, 'name'>\n    ), channels: Array<(\n      { __typename?: 'Channel' }\n      & Pick<Channel, 'id' | 'name'>\n    )>, messages: Array<(\n      { __typename?: 'Message' }\n      & Pick<Message, 'body' | 'channelId' | 'createdAt'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ) }\n    )> }\n  ), getMembersInServer: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'name' | 'id'>\n  )> }\n);\n\nexport type GetServersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetServersQuery = (\n  { __typename?: 'Query' }\n  & { getServers: Array<(\n    { __typename?: 'Server' }\n    & Pick<Server, 'id' | 'name'>\n  )> }\n);\n\nexport type CreateUserMutationVariables = Exact<{\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type CreateUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createUser'>\n);\n\n\nexport const CreateServerDocument = gql`\n    mutation CreateServer($name: String!) {\n  createServer(name: $name)\n}\n    `;\nexport type CreateServerMutationFn = Apollo.MutationFunction<CreateServerMutation, CreateServerMutationVariables>;\n\n/**\n * __useCreateServerMutation__\n *\n * To run a mutation, you first call `useCreateServerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateServerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createServerMutation, { data, loading, error }] = useCreateServerMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateServerMutation(baseOptions?: Apollo.MutationHookOptions<CreateServerMutation, CreateServerMutationVariables>) {\n        return Apollo.useMutation<CreateServerMutation, CreateServerMutationVariables>(CreateServerDocument, baseOptions);\n      }\nexport type CreateServerMutationHookResult = ReturnType<typeof useCreateServerMutation>;\nexport type CreateServerMutationResult = Apollo.MutationResult<CreateServerMutation>;\nexport type CreateServerMutationOptions = Apollo.BaseMutationOptions<CreateServerMutation, CreateServerMutationVariables>;\nexport const GetMessagesSubDocument = gql`\n    subscription GetMessagesSub($channelId: String!) {\n  getMessage(channelId: $channelId) {\n    body\n    user {\n      name\n      id\n    }\n    channelId\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetMessagesSubSubscription__\n *\n * To run a query within a React component, call `useGetMessagesSubSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesSubSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesSubSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetMessagesSubSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetMessagesSubSubscription, GetMessagesSubSubscriptionVariables>) {\n        return Apollo.useSubscription<GetMessagesSubSubscription, GetMessagesSubSubscriptionVariables>(GetMessagesSubDocument, baseOptions);\n      }\nexport type GetMessagesSubSubscriptionHookResult = ReturnType<typeof useGetMessagesSubSubscription>;\nexport type GetMessagesSubSubscriptionResult = Apollo.SubscriptionResult<GetMessagesSubSubscription>;\nexport const GetMessagesDocument = gql`\n    query GetMessages($channelId: String!) {\n  getMessages(channelId: $channelId) {\n    body\n    id\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return Apollo.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = Apollo.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const InviteMemberDocument = gql`\n    mutation InviteMember($email: String!, $serverId: String!) {\n  inviteMember(email: $email, serverId: $serverId)\n}\n    `;\nexport type InviteMemberMutationFn = Apollo.MutationFunction<InviteMemberMutation, InviteMemberMutationVariables>;\n\n/**\n * __useInviteMemberMutation__\n *\n * To run a mutation, you first call `useInviteMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInviteMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [inviteMemberMutation, { data, loading, error }] = useInviteMemberMutation({\n *   variables: {\n *      email: // value for 'email'\n *      serverId: // value for 'serverId'\n *   },\n * });\n */\nexport function useInviteMemberMutation(baseOptions?: Apollo.MutationHookOptions<InviteMemberMutation, InviteMemberMutationVariables>) {\n        return Apollo.useMutation<InviteMemberMutation, InviteMemberMutationVariables>(InviteMemberDocument, baseOptions);\n      }\nexport type InviteMemberMutationHookResult = ReturnType<typeof useInviteMemberMutation>;\nexport type InviteMemberMutationResult = Apollo.MutationResult<InviteMemberMutation>;\nexport type InviteMemberMutationOptions = Apollo.BaseMutationOptions<InviteMemberMutation, InviteMemberMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const SendMessageDocument = gql`\n    mutation SendMessage($channelId: String!, $message: String!) {\n  sendMessage(message: $message, channelId: $channelId) {\n    body\n  }\n}\n    `;\nexport type SendMessageMutationFn = Apollo.MutationFunction<SendMessageMutation, SendMessageMutationVariables>;\n\n/**\n * __useSendMessageMutation__\n *\n * To run a mutation, you first call `useSendMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendMessageMutation, { data, loading, error }] = useSendMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useSendMessageMutation(baseOptions?: Apollo.MutationHookOptions<SendMessageMutation, SendMessageMutationVariables>) {\n        return Apollo.useMutation<SendMessageMutation, SendMessageMutationVariables>(SendMessageDocument, baseOptions);\n      }\nexport type SendMessageMutationHookResult = ReturnType<typeof useSendMessageMutation>;\nexport type SendMessageMutationResult = Apollo.MutationResult<SendMessageMutation>;\nexport type SendMessageMutationOptions = Apollo.BaseMutationOptions<SendMessageMutation, SendMessageMutationVariables>;\nexport const GetServerDocument = gql`\n    query GetServer($id: String!) {\n  getServer(id: $id) {\n    server {\n      name\n    }\n    channels {\n      id\n      name\n    }\n    messages {\n      body\n      user {\n        name\n      }\n      channelId\n      createdAt\n    }\n  }\n  getMembersInServer(serverId: $id) {\n    name\n    id\n  }\n}\n    `;\n\n/**\n * __useGetServerQuery__\n *\n * To run a query within a React component, call `useGetServerQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetServerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetServerQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetServerQuery(baseOptions?: Apollo.QueryHookOptions<GetServerQuery, GetServerQueryVariables>) {\n        return Apollo.useQuery<GetServerQuery, GetServerQueryVariables>(GetServerDocument, baseOptions);\n      }\nexport function useGetServerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetServerQuery, GetServerQueryVariables>) {\n          return Apollo.useLazyQuery<GetServerQuery, GetServerQueryVariables>(GetServerDocument, baseOptions);\n        }\nexport type GetServerQueryHookResult = ReturnType<typeof useGetServerQuery>;\nexport type GetServerLazyQueryHookResult = ReturnType<typeof useGetServerLazyQuery>;\nexport type GetServerQueryResult = Apollo.QueryResult<GetServerQuery, GetServerQueryVariables>;\nexport const GetServersDocument = gql`\n    query GetServers {\n  getServers {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useGetServersQuery__\n *\n * To run a query within a React component, call `useGetServersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetServersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetServersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetServersQuery(baseOptions?: Apollo.QueryHookOptions<GetServersQuery, GetServersQueryVariables>) {\n        return Apollo.useQuery<GetServersQuery, GetServersQueryVariables>(GetServersDocument, baseOptions);\n      }\nexport function useGetServersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetServersQuery, GetServersQueryVariables>) {\n          return Apollo.useLazyQuery<GetServersQuery, GetServersQueryVariables>(GetServersDocument, baseOptions);\n        }\nexport type GetServersQueryHookResult = ReturnType<typeof useGetServersQuery>;\nexport type GetServersLazyQueryHookResult = ReturnType<typeof useGetServersLazyQuery>;\nexport type GetServersQueryResult = Apollo.QueryResult<GetServersQuery, GetServersQueryVariables>;\nexport const CreateUserDocument = gql`\n    mutation CreateUser($name: String!, $email: String!, $password: String!) {\n  createUser(name: $name, email: $email, password: $password)\n}\n    `;\nexport type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useLoginMutation } from \"../generated/graphql\";\r\n\r\nexport const Login = () => {\r\n  const [loginOptions, setLoginOptions] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [login] = useLoginMutation({\r\n    update: (store, { data }) => {\r\n      if (data?.login.accessToken) {\r\n        localStorage.setItem(\"authorization\", data.login.accessToken);\r\n        localStorage.removeItem(\"credentials\");\r\n      }\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"credentials\")) {\r\n      setLoginOptions(localStorage.getItem(\"credentials\") as any);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {localStorage.getItem(\"authorization\") ? <Redirect to=\"/\" /> : null}\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <input\r\n          onChange={(e) =>\r\n            setLoginOptions({\r\n              ...loginOptions,\r\n              [e.target.name]: e.target.value,\r\n            })\r\n          }\r\n          name=\"email\"\r\n          placeholder=\"email\"\r\n        />\r\n        <input\r\n          onChange={(e) =>\r\n            setLoginOptions({\r\n              ...loginOptions,\r\n              [e.target.name]: e.target.value,\r\n            })\r\n          }\r\n          name=\"password\"\r\n          placeholder=\"password\"\r\n          type=\"password\"\r\n        />\r\n        <button onClick={() => login({ variables: loginOptions })}>\r\n          Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useCreateUserMutation } from \"../generated/graphql\";\r\n\r\nexport const Register = () => {\r\n  const [registerOptions, setRegisterOptions] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [createUser, { error }] = useCreateUserMutation({\r\n    update: (store, { data }) => {\r\n      if (data?.createUser === true) {\r\n        localStorage.setItem(\"credentials\", JSON.stringify(registerOptions));\r\n      }\r\n    },\r\n  });\r\n  return (\r\n    <div>\r\n      {localStorage.getItem(\"credentials\") ? <Redirect to=\"/login\" /> : null}\r\n      <form\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateRows: \"repeat(1, 1fr)\",\r\n          width: \"50%\",\r\n          marginLeft: \"25%\",\r\n        }}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <input\r\n          onChange={(e) =>\r\n            setRegisterOptions({\r\n              ...registerOptions,\r\n              [e.target.name]: e.target.value,\r\n            })\r\n          }\r\n          placeholder=\"Name\"\r\n          name=\"name\"\r\n        />\r\n        <input\r\n          onChange={(e) =>\r\n            setRegisterOptions({\r\n              ...registerOptions,\r\n              [e.target.name]: e.target.value,\r\n            })\r\n          }\r\n          placeholder=\"Email\"\r\n          name=\"email\"\r\n        />\r\n        <input\r\n          onChange={(e) =>\r\n            setRegisterOptions({\r\n              ...registerOptions,\r\n              [e.target.name]: e.target.value,\r\n            })\r\n          }\r\n          placeholder=\"passsword\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          onClick={() => createUser({ variables: registerOptions })}\r\n        >\r\n          Register account\r\n        </button>\r\n      </form>\r\n      {<p>{error?.message}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  useGetServersQuery,\r\n  useCreateServerMutation,\r\n} from \"../generated/graphql\";\r\n\r\nexport const ServerViews = () => {\r\n  const { data, error, loading } = useGetServersQuery({\r\n    context: { headers: { token: localStorage.getItem(\"authorization\") } },\r\n  });\r\n\r\n  const [createServer] = useCreateServerMutation({\r\n    context: { headers: { token: localStorage.getItem(\"authorization\") } },\r\n  });\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ textAlign: \"center\" }}>Chatify</h1>\r\n      <h2 style={{ marginLeft: \"1rem\" }}>Your servers</h2>\r\n      <div\r\n        style={{\r\n          width: \"50%\",\r\n          boxShadow:\r\n            \"0 5px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08)\",\r\n          backgroundColor: \"#203A4C\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          marginLeft: \"25%\",\r\n        }}\r\n      >\r\n        {data?.getServers.map((server) => (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              width: \"4rem\",\r\n              height: \"4rem\",\r\n              borderRadius: \"50%\",\r\n              backgroundColor: \"#264A63\",\r\n              marginBottom: \"0.5rem\",\r\n              marginTop: \"0.5rem\",\r\n              boxShadow:\r\n                \"0 5px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08)\",\r\n            }}\r\n          >\r\n            <Link\r\n              to={`/server/${server.id}`}\r\n              style={{ color: \"white\", textDecoration: \"none\" }}\r\n            >\r\n              {server.name}\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        style={{\r\n          borderLeft: \"none\",\r\n          borderRight: \"none\",\r\n          borderTop: \"none\",\r\n          outline: \"none\",\r\n          backgroundColor: \"transparent\",\r\n          color: \"white\",\r\n        }}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Name of server\"\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          createServer({ variables: { name: text } });\r\n        }}\r\n      >\r\n        Create a new server\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import create from \"zustand\";\r\ntype State = {\r\n  selectedChannel: string | null;\r\n  selectChannel: (id: string) => void;\r\n};\r\n\r\nexport const useStore = create<State>((set) => ({\r\n  selectedChannel: null,\r\n  selectChannel: (id: string) => set((state) => ({ selectedChannel: id })),\r\n}));\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { match } from \"react-router-dom\";\r\nimport { setTimeout } from \"timers\";\r\nimport {\r\n  GetServerDocument,\r\n  GetServerQuery,\r\n  Message,\r\n  useGetMessagesQuery,\r\n  useGetMessagesSubSubscription,\r\n  User,\r\n  useSendMessageMutation,\r\n} from \"../generated/graphql\";\r\nimport { useStore } from \"../store/store\";\r\n\r\ninterface Props {\r\n  initialMessages:\r\n    | ({\r\n        __typename?: \"Message\" | undefined;\r\n      } & Pick<Message, \"channelId\" | \"body\" | \"createdAt\"> & {\r\n          user: {\r\n            __typename?: \"User\" | undefined;\r\n          } & Pick<User, \"name\">;\r\n        })[]\r\n    | undefined;\r\n  idParam: string;\r\n  channelName: string | undefined;\r\n}\r\n\r\nexport const Channel: React.FC<Props> = ({\r\n  initialMessages,\r\n  idParam,\r\n  channelName,\r\n}) => {\r\n  const selectedChannel = useStore((state) => state.selectedChannel);\r\n  const messageRef = useRef<HTMLDivElement>(null);\r\n  const [text, setText] = useState(\"\");\r\n  const { data } = useGetMessagesSubSubscription({\r\n    variables: {\r\n      channelId: selectedChannel as string,\r\n    },\r\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\r\n      const query: GetServerQuery | null = client.readQuery({\r\n        query: GetServerDocument,\r\n        variables: {\r\n          id: idParam,\r\n        },\r\n      });\r\n      console.log(data?.getMessage);\r\n      const newData = {\r\n        messages: [...(query as any).getServer.messages, data?.getMessage],\r\n      };\r\n      console.log(query, newData);\r\n      client.writeQuery({\r\n        query: GetServerDocument,\r\n        data: {\r\n          getServer: {\r\n            messages: newData.messages,\r\n          },\r\n        },\r\n        variables: {\r\n          id: idParam,\r\n        },\r\n      });\r\n      (messageRef as any).current.scrollTop = messageRef.current?.scrollHeight;\r\n    },\r\n  });\r\n\r\n  const [sendMessage] = useSendMessageMutation({\r\n    context: { headers: { token: localStorage.getItem(\"authorization\") } },\r\n  });\r\n\r\n  useEffect(() => {\r\n    (messageRef as any).current.scrollTop = messageRef.current?.scrollHeight;\r\n  }, [selectedChannel]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      (messageRef as any).current.scrollTop = messageRef.current?.scrollHeight;\r\n    }, 500);\r\n  }, [data]);\r\n  return (\r\n    <div>\r\n      <div style={{ backgroundColor: \"#3F0E40\" }}>\r\n        <h2 style={{ color: \"white\" }}>{channelName}</h2>\r\n      </div>\r\n      <div\r\n        ref={messageRef}\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          height: \"40rem\",\r\n          width: \"100%\",\r\n          border: \"1px solid grey\",\r\n          backgroundColor: \"white\",\r\n        }}\r\n      >\r\n        {initialMessages?.map((message) => (\r\n          <div style={{ color: \"#5B5A5B\" }}>\r\n            <p\r\n              style={{\r\n                fontSize: \"12px\",\r\n              }}\r\n            >\r\n              <strong style={{ marginRight: \"0.5rem\" }}>\r\n                {message.user.name}\r\n              </strong>\r\n              {new Date(message.createdAt).toDateString()}\r\n            </p>\r\n            <p>{message.body}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form\r\n        style={{ width: \"100%\", backgroundColor: \"#E8F5FB\", height: \"10rem\" }}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <textarea\r\n          placeholder={`Message #${channelName}`}\r\n          onChange={(e) => setText(e.target.value)}\r\n          value={text}\r\n          rows={6}\r\n          style={{\r\n            width: \"99.7%\",\r\n            borderTop: \"none\",\r\n            borderLeft: \"none\",\r\n            borderRight: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            outline: \"none\",\r\n            resize: \"none\",\r\n          }}\r\n        />\r\n        <div>\r\n          <button\r\n            style={{\r\n              width: \"10%\",\r\n              backgroundColor: \"#007A5A\",\r\n              outline: \"none\",\r\n              border: \"none\",\r\n              borderRadius: \"5px\",\r\n              color: \"white\",\r\n              boxShadow:\r\n                \"0 5px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08)\",\r\n            }}\r\n            onClick={() => {\r\n              sendMessage({\r\n                variables: {\r\n                  channelId: selectedChannel as string,\r\n                  message: text,\r\n                },\r\n              });\r\n              setText(\"\");\r\n            }}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  useGetServerQuery,\r\n  useInviteMemberMutation,\r\n} from \"../generated/graphql\";\r\nimport { useStore } from \"../store/store\";\r\nimport { Channel } from \"./Channel\";\r\nimport \"../Channel.css\";\r\n\r\nexport const Server = (props: any) => {\r\n  const [text, setText] = useState(\"\");\r\n  const { data, loading, error } = useGetServerQuery({\r\n    context: {\r\n      headers: {\r\n        token: localStorage.getItem(\"authorization\"),\r\n      },\r\n    },\r\n    variables: {\r\n      id: props.match.params.id,\r\n    },\r\n    onCompleted: (data) => {\r\n      console.log(data);\r\n      selectChannel(data.getServer.channels[0].id);\r\n    },\r\n  });\r\n\r\n  const [invite] = useInviteMemberMutation({\r\n    update: (_, { data }) => {\r\n      if (data?.inviteMember === true) {\r\n        window.location.reload();\r\n      } else if (data?.inviteMember === false) {\r\n        alert(\"Something went wrong, please try again\");\r\n      }\r\n    },\r\n    context: { headers: { token: localStorage.getItem(\"authorization\") } },\r\n  });\r\n\r\n  const selectedChannel = useStore((state) => state.selectedChannel);\r\n  const selectChannel = useStore((state) => state.selectChannel);\r\n\r\n  return (\r\n    <div>\r\n      <div>{loading ? <p>...loading</p> : null}</div>\r\n      <div>{error ? <p>{error.message}</p> : null}</div>\r\n      <Link to=\"/\">\r\n        <button>Go back to servers</button>\r\n      </Link>\r\n      <div style={{ backgroundColor: \"#3F0E40\" }}>\r\n        <h2 style={{ textAlign: \"center\", color: \"white\" }}>\r\n          {data?.getServer.server.name}\r\n        </h2>\r\n      </div>\r\n      <div style={{ display: \"flex\", justifyContent: \"left\", width: \"100%\" }}>\r\n        <div\r\n          style={{\r\n            width: \"15%\",\r\n            backgroundColor: \"#3F0E40\",\r\n          }}\r\n        >\r\n          <h1>Channels</h1>\r\n\r\n          {data?.getServer.channels.map((channel) => {\r\n            return (\r\n              <div\r\n                onClick={() => selectChannel(channel.id)}\r\n                style={{\r\n                  backgroundColor:\r\n                    channel.id === selectedChannel ? `#1164A3` : \"transparent\",\r\n                  color: \"#AA94AA\",\r\n                  border: \"none\",\r\n                  outline: \"none\",\r\n                  cursor: \"pointer\",\r\n                  height: \"2rem\",\r\n                }}\r\n              >\r\n                <h5> # {channel.name}</h5>\r\n              </div>\r\n            );\r\n          })}\r\n          <input\r\n            style={{\r\n              width: \"100%\",\r\n              borderTop: \"none\",\r\n              borderLeft: \"none\",\r\n              borderRight: \"none\",\r\n              outline: \"none\",\r\n              backgroundColor: \"transparent\",\r\n              color: \"white\",\r\n            }}\r\n            placeholder=\"Name of the channel you want to create\"\r\n          />\r\n        </div>\r\n\r\n        {loading ? (\r\n          <p>...loading</p>\r\n        ) : (\r\n          <div style={{ width: \"75%\" }}>\r\n            <Channel\r\n              idParam={props.match.params.id}\r\n              initialMessages={data?.getServer.messages.filter(\r\n                (message) => message.channelId === selectedChannel\r\n              )}\r\n              channelName={\r\n                data?.getServer.channels.find(\r\n                  (channel) => channel.id === selectedChannel\r\n                )?.name\r\n              }\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <h1>Members</h1>\r\n          {data?.getMembersInServer.map((user) => {\r\n            return (\r\n              <div style={{ marginLeft: \"5%\", marginBottom: \"10%\" }}>\r\n                <h4>{user.name}</h4>\r\n              </div>\r\n            );\r\n          })}\r\n          <div style={{ marginLeft: \"2%\" }}>\r\n            <label>Invite user</label>\r\n            <div>\r\n              <input\r\n                placeholder=\"Users email\"\r\n                onChange={(e) => setText(e.target.value)}\r\n                style={{ width: \"60%\" }}\r\n              />\r\n              <button\r\n                style={{ width: \"35%\" }}\r\n                onClick={() =>\r\n                  invite({\r\n                    variables: {\r\n                      email: text,\r\n                      serverId: props.match.params.id,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                Invite user\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Login } from \"./components/Login\";\nimport { Register } from \"./components/Register\";\nimport { ServerViews } from \"./components/ServerViews\";\nimport \"./App.css\";\nimport { Server } from \"./components/Server\";\nimport { Channel } from \"./components/Channel\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/register\" exact component={Register} />\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/\" exact component={ServerViews} />\n      <Route path=\"/server/:id\" exact component={Server} />\n      <Route path=\"/server/channel/:id\" exact component={Channel} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  split,\n} from \"@apollo/client\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nconst httpLink = new HttpLink({\n  uri: \"https://chat-app-server.vercel.app/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://chat-app-server.vercel.app/graphql\",\n  options: {\n    reconnect: true,\n    connectionParams: {\n      token: localStorage.getItem(\"authorization\"),\n    },\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}